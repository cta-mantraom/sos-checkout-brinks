#!/usr/bin/env python3
"""
Hook de valida√ß√£o para dados m√©dicos - SOS Checkout Brinks
Executa ap√≥s edi√ß√µes em formul√°rios m√©dicos e perfis
Garante LGPD compliance e valida√ß√£o de dados cr√≠ticos
"""

import json
import sys
import re
import os

def validate_cpf(cpf):
    """Valida CPF brasileiro usando algoritmo oficial"""
    cpf_clean = re.sub(r'\D', '', cpf)
    
    if len(cpf_clean) != 11:
        return False
    
    # Verifica se todos os d√≠gitos s√£o iguais
    if len(set(cpf_clean)) == 1:
        return False
    
    # Valida√ß√£o dos d√≠gitos verificadores
    for i in range(9, 11):
        value = sum((int(cpf_clean[j]) * ((i+1) - j) for j in range(0, i)))
        digit = ((value * 10) % 11) % 10
        if digit != int(cpf_clean[i]):
            return False
    
    return True

def check_medical_form_structure(content):
    """Verifica estrutura do formul√°rio m√©dico"""
    issues = []
    
    # Campos obrigat√≥rios
    required_fields = [
        'fullName', 'cpf', 'dateOfBirth', 'bloodType',
        'emergencyContact', 'phone', 'relationship'
    ]
    
    missing_fields = [field for field in required_fields if field not in content]
    
    if missing_fields:
        issues.append(f"‚ö†Ô∏è Campos obrigat√≥rios ausentes: {', '.join(missing_fields)}")
    
    # Valida√ß√£o de tipo sangu√≠neo
    if 'bloodType' in content:
        valid_types = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-']
        if not any(bt in content for bt in valid_types):
            issues.append("‚ö†Ô∏è Implementar valida√ß√£o de tipo sangu√≠neo v√°lido")
    
    return issues

def check_data_sanitization(content):
    """Verifica sanitiza√ß√£o de dados sens√≠veis"""
    issues = []
    
    # Verificar uso de DOMPurify
    if 'medical' in content.lower() or 'form' in content.lower():
        if 'DOMPurify' not in content and 'sanitize' not in content:
            issues.append("üö® CR√çTICO: Dados m√©dicos devem ser sanitizados (DOMPurify)")
        
        # Verificar se h√° console.log de dados sens√≠veis
        sensitive_patterns = [
            r'console\.log.*cpf',
            r'console\.log.*bloodType',
            r'console\.log.*medical',
            r'console\.log.*allerg'
        ]
        
        for pattern in sensitive_patterns:
            if re.search(pattern, content, re.IGNORECASE):
                issues.append("üö® CR√çTICO: N√£o logar dados m√©dicos sens√≠veis")
    
    return issues

def check_lgpd_compliance(content):
    """Verifica compliance com LGPD"""
    issues = []
    
    if 'medical' in content.lower() or 'profile' in content.lower():
        # Verificar consentimento
        if 'consent' not in content.lower() and 'termo' not in content.lower():
            issues.append("‚ö†Ô∏è LGPD: Implementar termo de consentimento")
        
        # Verificar criptografia
        if 'localStorage' in content or 'sessionStorage' in content:
            if 'encrypt' not in content.lower() and 'crypto' not in content.lower():
                issues.append("‚ö†Ô∏è LGPD: Dados sens√≠veis em storage devem ser criptografados")
        
        # Verificar direito ao esquecimento
        if 'delete' not in content.lower() and 'remove' not in content.lower():
            issues.append("‚ö†Ô∏è LGPD: Implementar func√£o de exclus√£o de dados")
    
    return issues

def check_validation_schemas(content):
    """Verifica schemas de valida√ß√£o Zod"""
    issues = []
    
    if 'form' in content.lower() or 'medical' in content.lower():
        if 'z.object' not in content and 'zod' not in content.lower():
            issues.append("‚ö†Ô∏è Implementar valida√ß√£o Zod para formul√°rio m√©dico")
        
        # Verificar valida√ß√£o de CPF
        if 'cpf' in content.lower():
            if 'validateCPF' not in content and 'validarCPF' not in content:
                issues.append("‚ö†Ô∏è CPF deve ter valida√ß√£o algor√≠tmica completa")
        
        # Verificar valida√ß√£o de telefone
        if 'phone' in content.lower() or 'telefone' in content.lower():
            if not re.search(r'regex.*phone|phone.*regex', content, re.IGNORECASE):
                issues.append("‚ö†Ô∏è Telefone deve validar formato (11) 98765-4321")
    
    return issues

def check_emergency_ux(content):
    """Verifica UX para situa√ß√µes de emerg√™ncia"""
    issues = []
    
    if 'emergency' in content.lower() or 'emerg√™ncia' in content.lower():
        # Verificar tamanho de fonte
        if 'fontSize' in content or 'text-' in content:
            if 'text-xs' in content or 'text-sm' in content:
                issues.append("‚ö†Ô∏è Fonte muito pequena para emerg√™ncias (m√≠n. 16px)")
        
        # Verificar contraste
        if 'text-gray-400' in content or 'text-gray-500' in content:
            issues.append("‚ö†Ô∏è Contraste baixo para emerg√™ncias (use WCAG AAA)")
        
        # Verificar loading states
        if 'loading' not in content.lower() and 'spinner' not in content.lower():
            issues.append("‚ö†Ô∏è Implementar indicadores de carregamento claros")
    
    return issues

def check_offline_support(content):
    """Verifica suporte offline para dados cr√≠ticos"""
    issues = []
    
    if 'medical' in content.lower() or 'qrcode' in content.lower():
        if 'offline' not in content.lower() and 'cache' not in content.lower():
            issues.append("‚ö†Ô∏è Implementar cache offline para dados m√©dicos")
        
        if 'serviceWorker' not in content and 'service-worker' not in content:
            issues.append("‚ö†Ô∏è Considerar Service Worker para funcionalidade offline")
    
    return issues

def main():
    try:
        # Ler dados do hook
        input_data = json.load(sys.stdin)
        file_path = input_data.get('tool_input', {}).get('file_path', '')
        
        # Verificar se √© arquivo relacionado a dados m√©dicos
        medical_keywords = ['medical', 'form', 'profile', 'emergency', 'qrcode']
        if not any(keyword in file_path.lower() for keyword in medical_keywords):
            # N√£o √© arquivo m√©dico, sair silenciosamente
            sys.exit(0)
        
        print(f"üè• Validando dados m√©dicos SOS: {file_path}")
        
        # Ler conte√∫do do arquivo
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except Exception as e:
            print(f"Erro ao ler arquivo: {e}", file=sys.stderr)
            sys.exit(1)
        
        # Executar todas as valida√ß√µes
        all_issues = []
        all_issues.extend(check_medical_form_structure(content))
        all_issues.extend(check_data_sanitization(content))
        all_issues.extend(check_lgpd_compliance(content))
        all_issues.extend(check_validation_schemas(content))
        all_issues.extend(check_emergency_ux(content))
        all_issues.extend(check_offline_support(content))
        
        # Separar issues cr√≠ticos de warnings
        critical_issues = [issue for issue in all_issues if 'üö® CR√çTICO' in issue]
        warnings = [issue for issue in all_issues if '‚ö†Ô∏è' in issue]
        
        # Reportar problemas cr√≠ticos
        if critical_issues:
            print("‚ùå PROBLEMAS CR√çTICOS DE DADOS M√âDICOS:", file=sys.stderr)
            for issue in critical_issues:
                print(f"  ‚Ä¢ {issue}", file=sys.stderr)
            print("üõë Corre√ß√£o OBRIGAT√ìRIA - Compliance LGPD em risco!", file=sys.stderr)
            sys.exit(2)  # Bloqueia execu√ß√£o
        
        # Reportar warnings
        if warnings:
            print("‚ö†Ô∏è Avisos de dados m√©dicos encontrados:")
            for warning in warnings:
                print(f"  ‚Ä¢ {warning}")
            print("üí° Considere corrigir para melhor compliance e UX")
        
        if not all_issues:
            print("‚úÖ Valida√ß√£o de dados m√©dicos passou!")
        
        # Dicas contextuais
        if 'form' in file_path.lower():
            print("üí° Lembre-se: Validar CPF com algoritmo completo")
        elif 'profile' in file_path.lower():
            print("üí° Lembre-se: Sanitizar todos os dados de entrada")
        elif 'emergency' in file_path.lower():
            print("üí° Lembre-se: Interface clara e leg√≠vel para emerg√™ncias")
    
    except Exception as e:
        print(f"Erro no hook de valida√ß√£o m√©dica: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()