#!/usr/bin/env python3
"""
Hook de valida√ß√£o para pagamentos MercadoPago - SOS Checkout Brinks
Executa ap√≥s edi√ß√µes em arquivos relacionados a pagamento
Valida Device ID, valores dos planos e configura√ß√µes cr√≠ticas
"""

import json
import sys
import re
import os

def check_device_id(content):
    """Verifica se Device ID est√° implementado corretamente"""
    issues = []
    
    # Verificar se script de seguran√ßa est√° presente
    if 'payment' in content.lower() or 'checkout' in content.lower():
        if 'MP_DEVICE_SESSION_ID' not in content and 'deviceId' not in content:
            issues.append("üö® CR√çTICO: Device ID ausente - Taxa de aprova√ß√£o ser√° reduzida em 40%")
        
        # Verificar valida√ß√£o do Device ID
        if 'deviceId' in content or 'device_id' in content:
            if 'if (!deviceId)' not in content and 'if (!device_id)' not in content:
                issues.append("‚ö†Ô∏è Device ID deve ser validado antes do uso")
    
    return issues

def check_plan_values(content):
    """Verifica se os valores dos planos est√£o corretos"""
    issues = []
    
    # Valores corretos: B√°sico R$ 5,00 e Premium R$ 10,00
    if 'basic' in content.lower() or 'b√°sico' in content.lower():
        if not any(val in content for val in ['5.00', '5,00', '500']):
            issues.append("‚ö†Ô∏è Plano B√°sico deve custar R$ 5,00")
    
    if 'premium' in content.lower():
        if not any(val in content for val in ['10.00', '10,00', '1000']):
            issues.append("‚ö†Ô∏è Plano Premium deve custar R$ 10,00")
    
    return issues

def check_payment_security(content):
    """Verifica seguran√ßa em pagamentos"""
    issues = []
    
    # HMAC validation em webhooks
    if 'webhook' in content.lower():
        if 'validateHMAC' not in content and 'x-signature' not in content:
            issues.append("üö® CR√çTICO: Webhook sem valida√ß√£o HMAC - Seguran√ßa comprometida")
        
        # Verificar retorno 200 sempre
        if 'res.status' in content and 'webhook' in content.lower():
            if 'status(200)' not in content:
                issues.append("‚ö†Ô∏è Webhook deve sempre retornar 200 para evitar retry do MercadoPago")
    
    # Idempotency Key
    if 'payment' in content and 'mercadopago' in content.lower():
        if 'X-Idempotency-Key' not in content and 'idempotency' not in content.lower():
            issues.append("‚ö†Ô∏è X-Idempotency-Key obrigat√≥rio para evitar pagamentos duplicados")
    
    return issues

def check_pix_implementation(content):
    """Verifica implementa√ß√£o PIX"""
    issues = []
    
    if 'pix' in content.lower():
        # Verificar componentes obrigat√≥rios
        required_pix = ['qrCode', 'qrCodeBase64', 'expirationTime', 'polling']
        missing = [comp for comp in required_pix if comp not in content]
        
        if missing:
            issues.append(f"‚ö†Ô∏è Componentes PIX faltando: {', '.join(missing)}")
        
        # Verificar polling interval
        if 'polling' in content.lower() and '5000' not in content:
            issues.append("‚ö†Ô∏è Polling PIX deve ser a cada 5 segundos")
    
    return issues

def check_error_handling(content):
    """Verifica tratamento de erros"""
    issues = []
    
    if 'payment' in content.lower() or 'checkout' in content.lower():
        # Verificar try/catch
        if 'async' in content:
            if 'try' not in content or 'catch' not in content:
                issues.append("‚ö†Ô∏è Opera√ß√µes ass√≠ncronas de pagamento devem ter try/catch")
        
        # Verificar loading states
        if 'useState' in content and 'loading' not in content.lower():
            issues.append("‚ö†Ô∏è Implementar loading state durante processamento de pagamento")
    
    return issues

def main():
    try:
        # Ler dados do hook
        input_data = json.load(sys.stdin)
        file_path = input_data.get('tool_input', {}).get('file_path', '')
        
        # Verificar se √© arquivo relacionado a pagamento
        payment_keywords = ['payment', 'checkout', 'mercadopago', 'pix', 'webhook']
        if not any(keyword in file_path.lower() for keyword in payment_keywords):
            # N√£o √© arquivo de pagamento, sair silenciosamente
            sys.exit(0)
        
        print(f"üí≥ Validando pagamentos SOS Checkout: {file_path}")
        
        # Ler conte√∫do do arquivo
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except Exception as e:
            print(f"Erro ao ler arquivo: {e}", file=sys.stderr)
            sys.exit(1)
        
        # Executar todas as valida√ß√µes
        all_issues = []
        all_issues.extend(check_device_id(content))
        all_issues.extend(check_plan_values(content))
        all_issues.extend(check_payment_security(content))
        all_issues.extend(check_pix_implementation(content))
        all_issues.extend(check_error_handling(content))
        
        # Separar issues cr√≠ticos de warnings
        critical_issues = [issue for issue in all_issues if 'üö® CR√çTICO' in issue]
        warnings = [issue for issue in all_issues if '‚ö†Ô∏è' in issue]
        
        # Reportar problemas cr√≠ticos
        if critical_issues:
            print("‚ùå PROBLEMAS CR√çTICOS DE PAGAMENTO:", file=sys.stderr)
            for issue in critical_issues:
                print(f"  ‚Ä¢ {issue}", file=sys.stderr)
            print("üõë Corre√ß√£o OBRIGAT√ìRIA - Taxa de aprova√ß√£o ser√° impactada!", file=sys.stderr)
            sys.exit(2)  # Bloqueia execu√ß√£o
        
        # Reportar warnings
        if warnings:
            print("‚ö†Ô∏è Avisos de pagamento encontrados:")
            for warning in warnings:
                print(f"  ‚Ä¢ {warning}")
            print("üí° Considere corrigir para melhor taxa de aprova√ß√£o")
        
        if not all_issues:
            print("‚úÖ Valida√ß√£o de pagamento passou!")
        
        # Dicas contextuais
        if 'checkout' in file_path.lower():
            print("üí° Lembre-se: Device ID √© obrigat√≥rio para aprova√ß√£o")
        elif 'webhook' in file_path.lower():
            print("üí° Lembre-se: Sempre retornar 200 no webhook")
        elif 'pix' in file_path.lower():
            print("üí° Lembre-se: Implementar polling a cada 5 segundos")
    
    except Exception as e:
        print(f"Erro no hook de valida√ß√£o de pagamento: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()